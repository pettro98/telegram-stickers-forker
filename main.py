import os
import sys
import asyncio as aio
import pyrogram as pg
import argparse

from print_stickerset_info import *
from download_stickerset import *
from upload_stickerset import *


async def main():
    args = argparse.ArgumentParser(prog="telegram-stickers-forker",
                                   description="Tool for downloading and uploading static stickersets",
                                   fromfile_prefix_chars="@")
    args.add_argument("--api_id", required=True, type=int, help="api_id registered using official Telegram webpage")
    args.add_argument("--api_hash", required=True, type=str, help="api_hash registered using official Telegram webpage")
    # TODO: option to delete session file after exit
    subcommands = args.add_subparsers(required=True, dest="command")

    info_args = subcommands.add_parser("info", description="Get info about installed stickerset")
    info_args_group = info_args.add_mutually_exclusive_group(required=True)
    info_args_group.add_argument("--title", type=str, help="Title to search for")
    info_args_group.add_argument("--id", type=str, help="ID to search for")
    info_args_group.add_argument("--short_name", type=str, help="Short name to search for")

    download_args = subcommands.add_parser("download",
                                           description="Download stickerset images and metainfo")
    download_args_group = download_args.add_mutually_exclusive_group(required=True)
    download_args_group.add_argument("--title", type=str, help="Title of stickerset to download")
    download_args_group.add_argument("--id", type=str, help="ID of stickerset to download")
    download_args_group.add_argument("--short_name", type=str, help="Short name of stickerset to download")
    download_args.add_argument("--out_dir", required=False, type=os.path.abspath,
                               help="Output directory. Any non-existing directories will be created. "
                                    "Default is ./stickerset_<stickerset_id>")
    download_args.add_argument("--format", required=False, type=str, default="png", choices=["png", "webp"],
                               help="Output image format.")

    upload_args = subcommands.add_parser("upload",
                                         description="Upload stickerset from directory with images and metainfo")
    upload_args.add_argument("--title", required=True, type=str, help="Uploaded stickerset title")
    upload_args.add_argument("--short_name", required=False, type=str,
                             help="Uploaded stickerset short name (used in links). "
                                  "If not provided, will be generated by Telegram server")
    upload_args.add_argument("--dir", required=True, type=os.path.abspath,
                             help="Directory containing sticker images and metainfo")

    parsed_args = args.parse_args(sys.argv[1:])

    app = pg.Client("my_account", parsed_args.api_id, parsed_args.api_hash, workdir=os.curdir)

    match parsed_args.command:
        case "info":
            await print_stickerset_info(app, parsed_args)
        case "download":
            await download_stickerset(app, parsed_args)
        case "upload":
            await upload_stickerset(app, parsed_args)


if __name__ == "__main__":
    aio.run(main())
